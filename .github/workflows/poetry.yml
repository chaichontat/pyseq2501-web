name: Test pyseq2server

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
  workflow_dispatch:
    inputs:
      reason:
        description: Reason for the workflow dispatch.
        required: true

jobs:
  test-poetry:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        python-version: ["3.10"]
      max-parallel: 5
    env:
      FAKE_HISEQ: 1

    steps:
      - uses: actions/checkout@v3

      - name: Set up ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          curl -sSL "https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py" | python

      - name: Update PATH
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update PATH for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install with Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry install

      - name: Test with Pytest
        run: |
          poetry run pytest -rP

      - name: Upload coverage to Codecov
        if: ${{ matrix.python-version }} == 3.10 && ${{ matrix.os }} == ubuntu-latest
        uses: codecov/codecov-action@v2
        with:
          file: coverage.xml
